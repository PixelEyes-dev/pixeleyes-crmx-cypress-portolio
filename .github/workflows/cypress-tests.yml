name: Cypress Tests

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  cypress-run:
    name: Cypress E2E Tests (Production)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Add environment for better tracking
    env:
      CYPRESS_ENVIRONMENT: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "CYPRESS_USER_EMAIL=${{ secrets.CYPRESS_USER_EMAIL }}" > .env
          echo "CYPRESS_USER_PASSWORD=${{ secrets.CYPRESS_USER_PASSWORD }}" >> .env
          echo "CYPRESS_BASE_URL=https://www.crmx.mx" >> .env
          echo "CYPRESS_ENVIRONMENT=production" >> .env
          echo "SUPABASE_DB_HOST=${{ secrets.SUPABASE_DB_HOST }}" >> .env
          echo "SUPABASE_DB_PORT=${{ secrets.SUPABASE_DB_PORT }}" >> .env
          echo "SUPABASE_DB_NAME=${{ secrets.SUPABASE_DB_NAME }}" >> .env
          echo "SUPABASE_DB_USER=${{ secrets.SUPABASE_DB_USER }}" >> .env
          echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD }}" >> .env
          echo "SUPABASE_DB_SSL=${{ secrets.SUPABASE_DB_SSL }}" >> .env
          echo "CYPRESS_SUPABASE_URL=${{ secrets.CYPRESS_SUPABASE_URL }}" >> .env
          echo "CYPRESS_SUPABASE_ANON_KEY=${{ secrets.CYPRESS_SUPABASE_ANON_KEY }}" >> .env

      - name: Verify production environment
        run: |
          echo "🚨 Running tests against PRODUCTION environment: https://www.crmx.mx"
          echo "⚠️  Using test credentials from GitHub secrets"
          echo "📋 Tests: userLogin.cy.js, userOnboarding.cy.js"
          echo "🗄️  Database connection tests included"
          echo "🔐 Database credentials configured from secrets"

      - name: Run Cypress tests against production
        id: cypress
        uses: cypress-io/github-action@v6
        continue-on-error: true
        with:
          browser: chrome
          record: false
          config: video=true,screenshotOnRunFailure=true
          spec: cypress/e2e/authentication/userLogin.cy.js,cypress/e2e/onboarding/userOnboarding.cy.js
          wait-on: "https://www.crmx.mx"
          wait-on-timeout: 120

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: steps.cypress.outcome == 'failure'
        with:
          name: cypress-screenshots-${{ github.run_number }}
          path: cypress/screenshots
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: steps.cypress.outcome == 'failure'
        with:
          name: cypress-videos-${{ github.run_number }}
          path: cypress/videos
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-${{ github.run_number }}
          path: cypress/results
          if-no-files-found: ignore
          retention-days: 7

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const testOutcome = '${{ steps.cypress.outcome }}';
            const testStatus = testOutcome === 'success' ? '✅ Passed' : '❌ Failed';
            let messageBody = `**Status:** ${testStatus}\n**Run Number:** #${context.runNumber}`;
            if (testOutcome === 'failure') {
              const screenshotsPath = 'cypress/screenshots';
              if (fs.existsSync(screenshotsPath)) {
                const screenshots = fs.readdirSync(screenshotsPath, { recursive: true }).filter(file => file.endsWith('.png'));
                if (screenshots.length > 0) {
                  messageBody += '\n\n📸 **Screenshots captured:**\n- ' + screenshots.join('\n- ');
                }
              }
              const videosPath = 'cypress/videos';
              if (fs.existsSync(videosPath)) {
                const videos = fs.readdirSync(videosPath).filter(file => file.endsWith('.mp4'));
                if (videos.length > 0) {
                  messageBody += '\n\n🎥 **Videos recorded:**\n- ' + videos.join('\n- ');
                }
              }
              const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              messageBody += `\n\n📦 [**Download artifacts**](${artifactUrl})`;
            }
            const message = `## 🧪 Cypress Test Results\n\n${messageBody}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Fail workflow if tests failed
        if: steps.cypress.outcome == 'failure'
        run: exit 1
