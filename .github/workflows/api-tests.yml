name: API Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'cypress/e2e/api/**'
      - 'cypress/support/**'
      - 'cypress.config.js'
      - '.github/workflows/api-tests.yml'
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  api-tests:
    name: Run API Tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [18]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify Cypress installation
        run: npx cypress verify

      - name: Run API Tests
        id: cypress
        run: npx cypress run --spec "cypress/e2e/api/**/*.cy.js" --headless --reporter json --reporter-options outputPath=cypress/results/results.json
        env:
          CYPRESS_SUPABASE_URL: ${{ secrets.CYPRESS_SUPABASE_URL }}
          CYPRESS_SUPABASE_ANON_KEY: ${{ secrets.CYPRESS_SUPABASE_ANON_KEY }}
          CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/results/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-videos
          path: cypress/videos/
          retention-days: 7

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-screenshots
          path: cypress/screenshots/
          retention-days: 7

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const testOutcome = '${{ steps.cypress.outcome }}';
            const testStatus = testOutcome === 'success' ? '✅ Passed' : '❌ Failed';
            let messageBody = `**API Tests Status:** ${testStatus}\n**Run Number:** #${context.runNumber}\n**Workflow:** API Tests`;

            if (testOutcome === 'failure') {
              messageBody += '\n\n🚨 **API Tests Failed** - Please check the test results below.';
              
              const screenshotsPath = 'cypress/screenshots';
              if (fs.existsSync(screenshotsPath)) {
                const screenshots = fs.readdirSync(screenshotsPath, { recursive: true }).filter(file => file.endsWith('.png'));
                if (screenshots.length > 0) {
                  messageBody += '\n\n📸 **Screenshots captured:**\n- ' + screenshots.join('\n- ');
                }
              }
              
              const videosPath = 'cypress/videos';
              if (fs.existsSync(videosPath)) {
                const videos = fs.readdirSync(videosPath).filter(file => file.endsWith('.mp4'));
                if (videos.length > 0) {
                  messageBody += '\n\n🎥 **Videos recorded:**\n- ' + videos.join('\n- ');
                }
              }
              
              const resultsPath = 'cypress/results/results.json';
              if (fs.existsSync(resultsPath)) {
                try {
                  const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                  if (results.runs && results.runs.length > 0) {
                    const run = results.runs[0];
                    messageBody += `\n\n📊 **Test Summary:**\n- **Total Tests:** ${run.stats.tests}\n- **Passed:** ${run.stats.passes}\n- **Failed:** ${run.stats.failures}\n- **Skipped:** ${run.stats.skipped}`;
                    
                    if (run.stats.failures > 0) {
                      messageBody += '\n\n❌ **Failed Tests:**';
                      run.tests.forEach(test => {
                        if (test.state === 'failed') {
                          messageBody += `\n- \`${test.title.join(' > ')}\` - ${test.error?.message || 'Unknown error'}`;
                        }
                      });
                    }
                  }
                } catch (e) {
                  messageBody += '\n\n⚠️ Could not parse test results file.';
                }
              }
              
              const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              messageBody += `\n\n📦 [**Download artifacts**](${artifactUrl})`;
            } else {
              messageBody += '\n\n🎉 **All API tests passed successfully!**';
            }

            const message = `## 🧪 API Test Results\n\n${messageBody}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Fail workflow if tests failed
        if: steps.cypress.outcome == 'failure'
        run: exit 1
