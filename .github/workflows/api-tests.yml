name: API Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'cypress/e2e/api/**'
      - 'cypress/e2e/leads/**'
      - 'src/services/api/**'
      - 'cypress.config.js'
      - '.github/workflows/api-tests.yml'
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  api-tests:
    name: Run API Tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [20]

    env:
      CYPRESS_SUPABASE_URL: ${{ secrets.CYPRESS_SUPABASE_URL }}
      CYPRESS_SUPABASE_ANON_KEY: ${{ secrets.CYPRESS_SUPABASE_ANON_KEY }}
      CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
      CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
      CYPRESS_USER2_EMAIL: ${{ secrets.CYPRESS_USER2_EMAIL }}
      CYPRESS_USER2_PASSWORD: ${{ secrets.CYPRESS_USER2_PASSWORD }}
      CYPRESS_USER1_ID: ${{ secrets.CYPRESS_USER1_ID }}
      CYPRESS_ORGANIZATION1_ID: ${{ secrets.CYPRESS_ORGANIZATION1_ID }}
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify Cypress installation
        run: npx cypress verify

      - name: Create results directory
        run: mkdir -p cypress/results

      - name: List API test files
        run: |
          echo "üîç API Test files to be executed:"
          find cypress/e2e/api -name "*.cy.js" -type f | sort
          echo "üìä Total API test files: $(find cypress/e2e/api -name "*.cy.js" -type f | wc -l)"
          echo ""
          echo "üß™ CRUD Tests (Sequential execution order):"
          echo "  1Ô∏è‚É£ 01-apiCreateLead.cy.js (Create + Cleanup)"
          echo "  2Ô∏è‚É£ 02-apiReadLead.cy.js (Read preserved lead)"
          echo "  3Ô∏è‚É£ 03-apiUpdateLead.cy.js (Update same lead)"
          echo "  4Ô∏è‚É£ 04-apiDeleteLead.cy.js (Delete same lead)"
          echo ""
          echo "üîó Other API Tests (Independent execution):"
          find cypress/e2e/api -name "*.cy.js" -type f ! -name "01-apiCreateLead.cy.js" ! -name "02-apiReadLead.cy.js" ! -name "03-apiUpdateLead.cy.js" ! -name "04-apiDeleteLead.cy.js" | sort || echo "  No other API tests found"

      - name: Debug Environment Variables
        run: |
          echo "üîç Environment variables check:"
          echo "USER1_ID: '$CYPRESS_USER1_ID'"
          echo "ORGANIZATION1_ID: '$CYPRESS_ORGANIZATION1_ID'"
          echo "USER_EMAIL: '$CYPRESS_USER_EMAIL'"
          echo "SUPABASE_URL: '$CYPRESS_SUPABASE_URL'"
          echo "SUPABASE_ANON_KEY: '$CYPRESS_SUPABASE_ANON_KEY'"
          echo ""
          echo "üìã Checking if variables are empty:"
          if [ -z "$CYPRESS_USER1_ID" ]; then echo "‚ùå USER1_ID is empty"; else echo "‚úÖ USER1_ID has value"; fi
          if [ -z "$CYPRESS_ORGANIZATION1_ID" ]; then echo "‚ùå ORGANIZATION1_ID is empty"; else echo "‚úÖ ORGANIZATION1_ID has value"; fi
          if [ -z "$CYPRESS_USER_EMAIL" ]; then echo "‚ùå USER_EMAIL is empty"; else echo "‚úÖ USER_EMAIL has value"; fi
          if [ -z "$CYPRESS_SUPABASE_URL" ]; then echo "‚ùå SUPABASE_URL is empty"; else echo "‚úÖ SUPABASE_URL has value"; fi
          echo ""
          echo "üîç Checking GitHub secrets availability:"
          echo "CYPRESS_USER1_ID secret exists: ${{ secrets.CYPRESS_USER1_ID != '' && 'YES' || 'NO' }}"
          echo "CYPRESS_ORGANIZATION1_ID secret exists: ${{ secrets.CYPRESS_ORGANIZATION1_ID != '' && 'YES' || 'NO' }}"
          echo ""
          echo "üîç Checking environment variable lengths:"
          echo "USER1_ID length: ${#CYPRESS_USER1_ID}"
          echo "ORGANIZATION1_ID length: ${#CYPRESS_ORGANIZATION1_ID}"
          echo "USER_EMAIL length: ${#CYPRESS_USER_EMAIL}"
          echo "SUPABASE_URL length: ${#CYPRESS_SUPABASE_URL}"
          echo ""
          echo "üîç Checking if variables contain 'undefined':"
          if [[ "$CYPRESS_USER1_ID" == *"undefined"* ]]; then echo "‚ùå USER1_ID contains 'undefined'"; else echo "‚úÖ USER1_ID does not contain 'undefined'"; fi
          if [[ "$CYPRESS_ORGANIZATION1_ID" == *"undefined"* ]]; then echo "‚ùå ORGANIZATION1_ID contains 'undefined'"; else echo "‚úÖ ORGANIZATION1_ID does not contain 'undefined'"; fi
          echo ""
          echo "üîç CRITICAL CHECK: If any required variables are empty, tests will fail!"
          if [ -z "$CYPRESS_USER1_ID" ] || [ -z "$CYPRESS_ORGANIZATION1_ID" ]; then
            echo "üö® CRITICAL ERROR: Required environment variables are missing!"
            echo "üö® Please check that these secrets exist in your GitHub repository:"
            echo "üö® - CYPRESS_USER1_ID"
            echo "üö® - CYPRESS_ORGANIZATION1_ID"
            echo ""
            echo "üîç Troubleshooting:"
            echo "1. Verify secrets exist in GitHub repository settings"
            echo "2. Check secret names match exactly (case-sensitive)"
            echo "3. Ensure secrets have actual values (not empty strings)"
            exit 1
          else
            echo "‚úÖ All required environment variables are present"
            echo "‚úÖ USER1_ID: $CYPRESS_USER1_ID"
            echo "‚úÖ ORGANIZATION1_ID: $CYPRESS_ORGANIZATION1_ID"
          fi

      - name: Run CRUD API Tests (Sequential)
        id: cypress-crud
        run: npx cypress run --spec "cypress/e2e/api/leads/01-apiCreateLead.cy.js,cypress/e2e/api/leads/02-apiReadLead.cy.js,cypress/e2e/api/leads/03-apiUpdateLead.cy.js,cypress/e2e/api/leads/04-apiDeleteLead.cy.js" --headless --reporter json --reporter-options outputPath=cypress/results/crud-results.json

      - name: Run Other API Tests
        id: cypress-other
        if: always()
        run: npx cypress run --spec "cypress/e2e/api/**/!(01-apiCreateLead|02-apiReadLead|03-apiUpdateLead|04-apiDeleteLead).cy.js" --headless --reporter json --reporter-options outputPath=cypress/results/other-results.json

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/results/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-videos
          path: cypress/videos/
          retention-days: 7

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-screenshots
          path: cypress/screenshots/
          retention-days: 7

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const crudOutcome = '${{ steps.cypress-crud.outcome }}';
            const otherOutcome = '${{ steps.cypress-other.outcome }}';
            const crudStatus = crudOutcome === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
            const otherStatus = otherOutcome === 'success' ? '‚úÖ Passed' : '‚ùå Failed';

            let messageBody = `**CRUD API Tests (Sequential):** ${crudStatus}\n**Other API Tests:** ${otherStatus}\n**Run Number:** #${context.runNumber}\n**Workflow:** API Tests`;

            if (crudOutcome === 'failure' || otherOutcome === 'failure') {
              messageBody += '\n\nüö® **API Tests Failed** - Please check the test results below.';
              
              const screenshotsPath = 'cypress/screenshots';
              if (fs.existsSync(screenshotsPath)) {
                const screenshots = fs.readdirSync(screenshotsPath, { recursive: true }).filter(file => file.endsWith('.png'));
                if (screenshots.length > 0) {
                  messageBody += '\n\nüì∏ **Screenshots captured:**\n- ' + screenshots.join('\n- ');
                }
              }
              
              const videosPath = 'cypress/videos';
              if (fs.existsSync(videosPath)) {
                const videos = fs.readdirSync(videosPath).filter(file => file.endsWith('.mp4'));
                if (videos.length > 0) {
                  messageBody += '\n\nüé• **Videos recorded:**\n- ' + videos.join('\n- ');
                }
              }
              
              // Parse CRUD test results
              const crudResultsPath = 'cypress/results/crud-results.json';
              const otherResultsPath = 'cypress/results/other-results.json';
              
              let totalTests = 0, totalPassed = 0, totalFailed = 0, totalSkipped = 0;
              
              if (fs.existsSync(crudResultsPath)) {
                try {
                  const crudResults = JSON.parse(fs.readFileSync(crudResultsPath, 'utf8'));
                  if (crudResults.runs && crudResults.runs.length > 0) {
                    const run = crudResults.runs[0];
                    totalTests += run.stats.tests;
                    totalPassed += run.stats.passes;
                    totalFailed += run.stats.failures;
                    totalSkipped += run.stats.skipped;
                    
                    if (run.stats.failures > 0) {
                      messageBody += '\n\n‚ùå **Failed CRUD Tests (Sequential):**';
                      run.tests.forEach(test => {
                        if (test.state === 'failed') {
                          messageBody += `\n- \`${test.title.join(' > ')}\` - ${test.error?.message || 'Unknown error'}`;
                        }
                      });
                    }
                  }
                } catch (e) {
                  messageBody += '\n\n‚ö†Ô∏è Could not parse CRUD test results file.';
                }
              }
              
              if (fs.existsSync(otherResultsPath)) {
                try {
                  const otherResults = JSON.parse(fs.readFileSync(otherResultsPath, 'utf8'));
                  if (otherResults.runs && otherResults.runs.length > 0) {
                    const run = otherResults.runs[0];
                    totalTests += run.stats.tests;
                    totalPassed += run.stats.passes;
                    totalFailed += run.stats.failures;
                    totalSkipped += run.stats.skipped;
                    
                    if (run.stats.failures > 0) {
                      messageBody += '\n\n‚ùå **Failed Other API Tests:**';
                      run.tests.forEach(test => {
                        if (test.state === 'failed') {
                          messageBody += `\n- \`${test.title.join(' > ')}\` - ${test.error?.message || 'Unknown error'}`;
                        }
                      });
                    }
                  }
                } catch (e) {
                  messageBody += '\n\n‚ö†Ô∏è Could not parse other test results file.';
                }
              }
              
              if (totalTests > 0) {
                messageBody += `\n\nüìä **Combined Test Summary:**\n- **Total Tests:** ${totalTests}\n- **Passed:** ${totalPassed}\n- **Failed:** ${totalFailed}\n- **Skipped:** ${totalSkipped}`;
              }
              
              const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              messageBody += `\n\nüì¶ [**Download artifacts**](${artifactUrl})`;
            } else {
              messageBody += '\n\nüéâ **All API tests passed successfully!**';
            }

            const message = `## üß™ API Test Results\n\n${messageBody}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Fail workflow if tests failed
        if: steps.cypress-crud.outcome == 'failure' || steps.cypress-other.outcome == 'failure'
        run: exit 1
